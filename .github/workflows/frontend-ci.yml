name: React Vite CI Pipeline

on:
    push:
        branches: [ main ]
    pull_request:
        branches: [ main ]

permissions:
    contents: read
    pull-requests: write

jobs:
    frontend-ci:
        runs-on: ubuntu-latest
        
        env:
          GROQ_API_ENDPOINT: ${{ secrets.GROQ_API_ENDPOINT }}  # API endpoint for GROQ
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}           # Authentication key
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}               # GitHub access token

        steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Node.js 18.x
          uses: actions/setup-node@v3
          with:
            node-version: 18.x
            cache: 'npm'
            cache-dependency-path: '**/package-lock.json'

        - name: Install frontend dependencies
          working-directory: ./frontend
          run: npm ci

        - name: Cache Node modules
          uses: actions/cache@v3
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            restore-keys: |
              ${{ runner.os }}-node-
            
        - name: Lint TypeScript code
          working-directory: ./frontend
          run: npm run lint
        
        - name: Run React tests
          working-directory: ./frontend
          run: npm test -- --passWithNoTests
        
        - name: Build frontend with Vite
          working-directory: ./frontend
          run: npm run build
        
        - name: Set up Python 3.13.0
          uses: actions/setup-python@v4
          with:
            python-version: 3.13.0

        - name: Cache pip packages
          uses: actions/cache@v3
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
              ${{ runner.os }}-pip-

        - name: Install Python dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2

        - name: Run DevOps AI Team
          run: |
            python main.py

        - name: Build and start Docker Container
          run: |
            docker build -t devgenius-frontend:latest .
            docker run -d -p 4173:4173 devgenius-frontend:latest
            sleep 5  # Give container a moment to start
        
        - name: Test Docker Container
          run: |
            if docker ps | grep -q devgenius-frontend; then
            echo "üîç Testing Docker container endpoints..."
            
            if curl -I http://localhost:4173/ | grep -q "200 OK"; then
                echo "‚úÖ React app home page test passed! üöÄ"
            else
                echo "‚ùå React app home page test failed üò¢"
                exit 1
            fi
            
            echo "üéâ All Docker container tests passed successfully! üåü"
            else
            echo "‚ö†Ô∏è Docker container not running, skipping tests ü§î"
            exit 1
            fi
        